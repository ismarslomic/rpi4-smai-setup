#!/bin/bash
# e: Exit immediately if a command returns a non-zero status
# u: Treat unset variables as an error when substituting.
# o pipefail: return value of a pipeline is the value of the last (rightmost) command
set -euo pipefail

readonly DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
source "$DIR/../log_util/log.sh"

trap e_onScriptFailed 1 2 3 15 ERR

function disable_sshd_last_login() {
  CONFIG_FILE="/etc/ssh/sshd_config"
  BACKUP_FILE="/etc/ssh/sshd_config.backup"
  SETTING="PrintLastLog no"

  # Step 1: Create a backup
  sudo cp "$CONFIG_FILE" "$BACKUP_FILE"

  # Step 2: Append the setting (always ensuring it's at the end)
  echo "$SETTING" | sudo tee -a "$CONFIG_FILE" >/dev/null

  # Step 3: Validate SSH configuration
  if sudo sshd -t; then
    e_note "Disabled successfully last login print in SSH. Restarting the SSH service."
    sudo systemctl reload sshd
  else
    e_error "Failed to disable the last login print in SSH. Reverting and restarting the SSH service."
    sudo mv "$BACKUP_FILE" "$CONFIG_FILE"
  fi

  e_note "Updating SSH completed."
}

copy_dynamic_motd_file() {
  local source_file="$DIR/update-motd.d/$1"
  local destination_file="/etc/update-motd.d/$1"

  e_note "Copying file from $source_file to $destination_file"
  sudo cp "$source_file" "$destination_file"
  sudo chmod +x "$destination_file"
  e_note "File copied successfully to $destination_file"
}

# Script that updates static script with available updates
copy_static_motd_script() {
  local static_update_directory="/etc/update-motd-static.d"
  local source_file="$DIR/update-motd-static.d/20-update"
  local destination_file="$static_update_directory/20-update"

  sudo mkdir -p "$static_update_directory"
  e_note "Created directory $static_update_directory"

  e_note "Copying file from $source_file to $destination_file"
  sudo cp "$source_file" "$destination_file"
  sudo chmod +x "$destination_file"
  e_note "File copied successfully to $destination_file"
}

copy_systemd_timer_file() {
  local source_file="$DIR/systemd-timer/$1"
  local destination_file="/etc/systemd/system/$1"

  e_note "Copying file from $source_file to $destination_file"
  sudo cp "$source_file" "$destination_file"
  sudo chmod +x "$destination_file"
  e_note "File copied successfully to $destination_file"
}

remove_file_if_exists() {
  local file_to_delete="$1"

  if [ -f "$file_to_delete" ]; then
    sudo rm "$file_to_delete"
    e_note "Deleted default file: $file_to_delete"
  else
    e_note "None default file found to delete: $file_to_delete"
  fi
}

# Based on https://github.com/ar51an/raspberrypi-motd/tree/main
function main() {
  e_header "Setting up Message of the day (MOTD)"

  # Remove default static MOTD file if exists
  remove_file_if_exists "/etc/motd"

  # Remove default dynamic MOTD if exists
  remove_file_if_exists "/etc/update-motd.d/10-uname"

  # Disable default print of last login from sshd
  disable_sshd_last_login

  # Copy dynamic welcome MOTD file
  # Displays the raspberry model, welcome user message, current timestamp and kernel version.
  copy_dynamic_motd_file "10-welcome"

  # Copy dynamic system MOTD file
  # Shows various details of the system. It includes temperature, memory, running processes and others.
  # Few labels are trimmed down, like Procs for Processes, Temp for Temperature, Last for Last Login.
  # You can use full labels according to your preference and arrange them accordingly.
  copy_dynamic_motd_file "15-system"

  # Copy dynamic update MOTD file
  # This static script displays available update count. It is generated by /etc/update-motd-static.d/20-update.
  copy_dynamic_motd_file "20-update"

  # Copy dynamic reboot required MOTD file
  # Displays message if reboot is required
  copy_dynamic_motd_file "25-reboot-required"

  # Copy static update MOTD file
  # Calculates available update count and generates the static script for motd display.
  # It can be expanded to show the security update count separately like Ubuntu.
  copy_static_motd_script

  # Run dynamic script to update the static script /etc/update-motd.d/20-update with pending update count (if any).
  # We will automate this process through systemd timer.
  sudo run-parts /etc/update-motd-static.d

  # Copy Systemd Timer files
  copy_systemd_timer_file "motd-update.service"
  copy_systemd_timer_file "motd-update.timer"

  # Enable timer
  sudo systemctl enable motd-update.timer

  # Start timer
  sudo systemctl start motd-update.timer

  # List all timers
  e_note "Run systemctl list-timers to see all timers"

  e_success "Setting up Message of the day (MOTD) completed"
}

main
